# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'banker'sui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from final55 import Ui_window55

class Ui_window5(object):
    def setupUi(self, window5):
        window5.setObjectName("window5")
        window5.resize(795, 563)
        self.centralwidget = QtWidgets.QWidget(window5)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(300, 100, 421, 191))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 180, 151, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(80, 370, 151, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_2.setGeometry(QtCore.QRect(300, 360, 421, 71))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(0)
        self.tableWidget_2.setRowCount(0)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(280, 470, 241, 61))
        self.pushButton.setObjectName("pushButton")
        #self.pushButton.clicked.connect(self.bankersAlgorithm(5,3,self.getneed,self.getdata,self.getavailable))
        window5.setCentralWidget(self.centralwidget)
        self.retranslateUi(window5)
        QtCore.QMetaObject.connectSlotsByName(window5)

    def retranslateUi(self, window5):
        _translate = QtCore.QCoreApplication.translate
        window5.setWindowTitle(_translate("window5", "MainWindow"))
        self.label.setText(_translate("window5", "needed resources"))
        self.label_2.setText(_translate("window5", "Total available resources"))
        self.pushButton.setText(_translate("window5", "next"))
    #get data from other window
    def getdata(self,data):
        self.data = data
        self.getdata=self.data
        #print(self.getdata)

    def getdata1(self,data1):
        self.data1 = data1
        self.getdata1=self.data1
        #print(self.getdata1)

    def getavailable(self,available):
        self.available = available
        self.getavailable=self.available
        #print(self.getavailable)

    def getneed(self,need):
        self.need = need
        self.getneed=self.need
        #print(self.getneed)
    # RescourcesRequested=[[0],[0],[0]]
    # def bankersAlgorithm(self,process, rescources, need, allocation, available):
    #         # calculate safe sequence and output the available table after each iteration
    #         # show error message if safe sequence does not exist
    #         # show info message if safe sequence exists

    #         # Check if the request can be fulfilled by comparing it with the Available resources:



    #         #get window55 in here
    #         self.window55 = QtWidgets.QMainWindow()
    #         self.ui = Ui_window55()
    #         self.ui.setupUi(self.window55)
    #         self.window55.show()
    #         if any(self.RescourcesRequested[0][i] > available[0][i] for i in range(rescources)):
    #             QtWidgets.QMessageBox.warning(
    #                 self.centralwidget, "Result", "Request Denied, since it exceeds the Available resources")
    #             return

    #         # Check if the request can be fulfilled by comparing it with the Need resources:
    #         if any(self.RescourcesRequested[0][i] > need[0][i] for i in range(rescources)):
    #             QtWidgets.QMessageBox.warning(
    #                 self.centralwidget, "Result", "Request Denied, since it exceeds the Need resources")
    #             return

    #         safeSeq = []
    #         work = available.copy()
    #         finish = [False] * process
    #         while False in finish:
    #             for i in range(process):
    #                 if finish[i] == False:
    #                     for j in range(rescources):
    #                         if need[i][j] > work[0][j]:
    #                             break
    #                     else:
    #                         for j in range(rescources):
    #                             work[0][j] += allocation[i][j]
    #                         finish[i] = True
    #                         safeSeq.append(i + 1)
    #                         self.ui.outputTextEdit.append(
    #                             f"Available after P{i + 1} is executed: {work}")
                            

    #         if len(safeSeq) == process:
    #             QtWidgets.QMessageBox.information(
    #                 self.centralwidget, "Result", "Request Granted, since it is safe")
    #             return str(safeSeq)
    #         else:
    #             return "No safe sequence exists"
    




if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window5 = QtWidgets.QMainWindow()
    ui = Ui_window5()
    ui.setupUi(window5)
    window5.show()
    sys.exit(app.exec_())
